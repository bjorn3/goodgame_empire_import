var searchIndex = {};
searchIndex["goodgame_empire_import"] = {"doc":"","items":[[5,"as_json","goodgame_empire_import","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"read_castles","","Read castles",null,{"inputs":[{"name":"gbd"}],"output":null}],[5,"read_names","","",null,{"inputs":[{"name":"string"}],"output":null}],[0,"error","","Error",null,null],[4,"Error","goodgame_empire_import::error","Generic error type",null,null],[13,"InvalidFormat","","Can&#39;t parse the data returned from the server",0,null],[13,"JsonError","","Can&#39;t parse the json data",0,null],[4,"JsonError","","Generic json error",null,null],[13,"ParserError","","",1,null],[13,"DecoderError","","",1,null],[13,"EncoderError","","",1,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"from","","",1,{"inputs":[{"name":"parsererror"}],"output":{"name":"jsonerror"}}],[11,"from","","",1,{"inputs":[{"name":"decodererror"}],"output":{"name":"jsonerror"}}],[11,"from","","",1,{"inputs":[{"name":"encodererror"}],"output":{"name":"jsonerror"}}],[0,"packet","goodgame_empire_import","Packet",null,null],[4,"ServerPacket","goodgame_empire_import::packet","A server returned packet of data.",null,null],[13,"Data","","Unrecognized data",2,null],[13,"Kpi","","Kpi packet",2,null],[13,"Gam","","Gam packet",2,null],[13,"Gbd","","Main data source.\nSend by the server when you login.",2,null],[13,"Gdi","","Castle information of a specific user.",2,null],[13,"Sei","","Unknown kind of data",2,null],[13,"Irc","","Some kind of keepalive data.",2,null],[13,"Nfo","","Server info",2,null],[13,"CoreGpi","","Get player info",2,null],[13,"Gaa","","Map info",2,null],[13,"None","","Empty packet.",2,null],[4,"ClientPacket","","A client send packet of data",null,null],[13,"Gdi","","Ask for user castles",3,null],[13,"Gaa","","Ask for world map",3,null],[13,"None","","",3,null],[11,"new","","Create a packet from text.\nReturns ServerPacket::Data when it does not recognize the data.",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"to_raw_data","","",3,null],[0,"data","goodgame_empire_import","Data",null,null],[3,"DATAMGR","goodgame_empire_import::data","",null,null],[3,"Castle","","Castle data",null,null],[12,"id","","Internal id",4,null],[12,"owner_id","","Internal owner id",4,null],[12,"name","","Castle name",4,null],[12,"x","","X position",4,null],[12,"y","","Y position",4,null],[12,"world","","World",4,null],[3,"User","","User data",null,null],[12,"id","","Internal id",5,null],[12,"username","","Username",5,null],[12,"own_alliance","","Is it from your own alliance?",5,null],[3,"DataMgr","","Data manager",null,null],[12,"castles","","List of castles",6,null],[12,"users","","",6,null],[4,"World","","World",null,null],[13,"Fire","","Fire Peaks",7,null],[13,"Sand","","Burning Sands",7,null],[13,"Grass","","Green",7,null],[13,"Ice","","EW",7,null],[13,"SpecialEvent","","Special Event",7,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",8,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",8,null],[11,"try_lock","","Attempts to acquire this lock.",8,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",8,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",8,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",8,null],[11,"from","alloc::boxed","",9,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",10,null],[11,"description","","",11,null],[11,"description","core::num","",12,null],[11,"description","","",13,null],[11,"description","core::num::dec2flt","",14,null],[11,"description","collections::string","",15,null],[11,"description","","",16,null],[11,"description","","",17,null],[11,"description","rustc_unicode::char","",18,null],[11,"description","alloc::boxed","",9,null],[11,"cause","","",9,null],[11,"description","core::fmt","",19,null],[11,"is","goodgame_empire_import","Returns true if the boxed type is the same as `T`",20,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",20,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",20,null],[11,"is","","Forwards to the method defined on the type `Any`.",20,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",20,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",20,null],[11,"is","","Forwards to the method defined on the type `Any`.",20,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",20,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",20,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",20,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",20,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",20,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"next","std::ascii","",21,null],[11,"size_hint","","",21,null],[11,"next_back","","",21,null],[11,"clone","std::thread::local","",22,null],[11,"eq","","",22,null],[11,"with","","Acquires a reference to the value in this TLS key.",23,null],[11,"state","","Query the current state of this key.",23,null],[11,"new","std::thread::local::elf","",24,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",24,null],[11,"new","std::thread::local::os","",25,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",25,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",26,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",26,null],[11,"stack_size","","Sets the size of the stack for the new thread.",26,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",26,null],[11,"clone","","",27,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",27,null],[11,"name","","Gets the thread&#39;s name.",27,null],[11,"fmt","","",27,null],[11,"thread","","Extracts a handle to the underlying thread",28,null],[11,"join","","Waits for the associated thread to finish.",28,null],[11,"clone","std::collections::hash::map","",29,null],[11,"new","","Creates an empty HashMap.",29,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",29,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",29,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",29,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",29,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",29,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",29,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",29,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",29,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",29,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",29,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",29,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",29,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",29,null],[11,"len","","Returns the number of elements in the map.",29,null],[11,"is_empty","","Returns true if the map contains no elements.",29,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",29,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",29,null],[11,"get","","Returns a reference to the value corresponding to the key.",29,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",29,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",29,null],[11,"insert","","Inserts a key-value pair into the map.",29,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",29,null],[11,"eq","","",29,null],[11,"fmt","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",29,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"len","","",30,null],[11,"next","","",33,null],[11,"size_hint","","",33,null],[11,"len","","",33,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"len","","",34,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"len","","",31,null],[11,"next","","",32,null],[11,"size_hint","","",32,null],[11,"len","","",32,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"len","","",35,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"len","","",36,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",37,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",37,null],[11,"key","","Returns a reference to this entry&#39;s key.",37,null],[11,"key","","Gets a reference to the key in the entry.",38,null],[11,"remove_pair","","Take the ownership of the key and value from the map.",38,null],[11,"get","","Gets a reference to the value in the entry.",38,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",38,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",38,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",38,null],[11,"remove","","Takes the value out of the entry, and returns it",38,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",39,null],[11,"into_key","","Take ownership of the key.",39,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",39,null],[11,"from_iter","","",29,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",29,null],[11,"extend","","",29,null],[11,"clone","","",40,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",40,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",40,null],[11,"write","","",41,null],[11,"finish","","",41,null],[11,"default","","",40,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",42,null],[11,"new","","Creates an empty HashSet.",42,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",42,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",42,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",42,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",42,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",42,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",42,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",42,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",42,null],[11,"difference","","Visit the values representing the difference.",42,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",42,null],[11,"intersection","","Visit the values representing the intersection.",42,null],[11,"union","","Visit the values representing the union.",42,null],[11,"len","","Returns the number of elements in the set.",42,null],[11,"is_empty","","Returns true if the set contains no elements.",42,null],[11,"drain","","Clears the set, returning all elements in an iterator.",42,null],[11,"clear","","Clears the set, removing all values.",42,null],[11,"contains","","Returns `true` if the set contains a value.",42,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",42,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",42,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",42,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",42,null],[11,"insert","","Adds a value to the set.",42,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",42,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",42,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",42,null],[11,"eq","","",42,null],[11,"fmt","","",42,null],[11,"from_iter","","",42,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",42,null],[11,"extend","","",42,null],[11,"default","","",42,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",42,null],[11,"clone","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"len","","",43,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"len","","",44,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"len","","",45,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"drop","collections::binary_heap","",50,null],[11,"deref","","",50,null],[11,"deref_mut","","",50,null],[11,"clone","","",51,null],[11,"clone_from","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",51,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",51,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",51,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",51,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",51,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",51,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",51,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",51,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",51,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",51,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",51,null],[11,"push","","Pushes an item onto the binary heap.",51,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",51,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",51,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",51,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",51,null],[11,"len","","Returns the length of the binary heap.",51,null],[11,"is_empty","","Checks if the binary heap is empty.",51,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",51,null],[11,"clear","","Drops all items from the binary heap.",51,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",51,null],[11,"clone","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"clone","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next_back","","",53,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"from","","",51,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",51,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",51,null],[11,"extend","","",51,null],[11,"extend","","",51,null],[11,"clone","collections::linked_list","",56,null],[11,"clone","","",57,null],[11,"default","","",58,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",58,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",58,null],[11,"iter","","Provides a forward iterator.",58,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",58,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",58,null],[11,"len","","Returns the length of the `LinkedList`.",58,null],[11,"clear","","Removes all elements from the `LinkedList`.",58,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",58,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",58,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",58,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",58,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",58,null],[11,"push_front","","Adds an element first in the list.",58,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",58,null],[11,"push_back","","Appends an element to the back of a list",58,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",58,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",58,null],[11,"front_place","","Returns a place for insertion at the front of the list.",58,null],[11,"back_place","","Returns a place for insertion at the back of the list.",58,null],[11,"drop","","",58,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",59,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",59,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",58,null],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"partial_cmp","","",58,null],[11,"cmp","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"make_place","","",60,null],[11,"pointer","","",60,null],[11,"finalize","","",60,null],[11,"make_place","","",61,null],[11,"pointer","","",61,null],[11,"finalize","","",61,null],[11,"clone","collections::vec_deque","",62,null],[11,"drop","","",62,null],[11,"default","","",62,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",62,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",62,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",62,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",62,null],[11,"swap","","Swaps elements at indices `i` and `j`.",62,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",62,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",62,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",62,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",62,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",62,null],[11,"iter","","Returns a front-to-back iterator.",62,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",62,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",62,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",62,null],[11,"len","","Returns the number of elements in the `VecDeque`.",62,null],[11,"is_empty","","Returns true if the buffer contains no elements",62,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",62,null],[11,"clear","","Clears the buffer, removing all values.",62,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",62,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",62,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",62,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",62,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",62,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",62,null],[11,"push_front","","Inserts an element first in the sequence.",62,null],[11,"push_back","","Appends an element to the back of a buffer",62,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",62,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",62,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",62,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",62,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",62,null],[11,"split_off","","Splits the collection into two at the given index.",62,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",62,null],[11,"retain","","Retains only the elements specified by the predicate.",62,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",62,null],[11,"clone","","",63,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"next_back","","",63,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"drop","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"eq","","",62,null],[11,"partial_cmp","","",62,null],[11,"cmp","","",62,null],[11,"hash","","",62,null],[11,"index","","",62,null],[11,"index_mut","","",62,null],[11,"from_iter","","",62,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"fmt","","",62,null],[11,"from","","",62,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",55,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"next","std::env","",67,null],[11,"size_hint","","",67,null],[11,"next","","",68,null],[11,"size_hint","","",68,null],[11,"clone","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"fmt","","",69,null],[11,"fmt","","",69,null],[11,"description","","",69,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"fmt","","",71,null],[11,"fmt","","",71,null],[11,"description","","",71,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"len","","",72,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"len","","",73,null],[11,"clone","std::ffi::c_str","",74,null],[11,"hash","","",74,null],[11,"cmp","","",74,null],[11,"partial_cmp","","",74,null],[11,"lt","","",74,null],[11,"le","","",74,null],[11,"gt","","",74,null],[11,"ge","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"hash","","",75,null],[11,"fmt","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",74,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",74,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",74,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",74,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",74,null],[11,"into_bytes","","Returns the underlying byte buffer.",74,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",74,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",74,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",74,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",75,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",75,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",75,null],[11,"as_ptr","","Returns the inner pointer to this C string.",75,null],[11,"to_bytes","","Converts this C string to a byte slice.",75,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",75,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",75,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",75,null],[11,"deref","","",74,null],[11,"fmt","","",74,null],[11,"from","collections::vec","",55,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",75,null],[11,"default","","",74,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",74,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",76,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",76,null],[11,"description","","",76,null],[11,"fmt","","",76,null],[11,"from","std::io::error","",79,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",78,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",78,null],[11,"description","","",78,null],[11,"cause","","",78,null],[11,"fmt","","",78,null],[11,"eq","","",75,null],[11,"partial_cmp","","",75,null],[11,"cmp","","",75,null],[11,"to_owned","","",75,null],[11,"from","","",74,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",74,null],[11,"as_ref","","",75,null],[11,"as_ref","","",74,null],[11,"clone","std::ffi::os_str","",80,null],[11,"new","","Constructs a new empty `OsString`.",80,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",80,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",80,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",80,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",80,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",80,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",80,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",80,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",80,null],[11,"from","","",80,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",80,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",80,null],[11,"new","","Coerces into an `OsStr` slice.",81,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",81,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",81,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",81,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",81,null],[11,"len","","Returns the length of this `OsStr`.",81,null],[11,"deref","","",80,null],[11,"default","","",80,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",80,null],[11,"eq","","",80,null],[11,"eq","","",80,null],[11,"partial_cmp","","",80,null],[11,"lt","","",80,null],[11,"le","","",80,null],[11,"gt","","",80,null],[11,"ge","","",80,null],[11,"partial_cmp","","",80,null],[11,"cmp","","",80,null],[11,"hash","","",80,null],[11,"eq","","",81,null],[11,"eq","","",81,null],[11,"partial_cmp","","",81,null],[11,"lt","","",81,null],[11,"le","","",81,null],[11,"gt","","",81,null],[11,"ge","","",81,null],[11,"partial_cmp","","",81,null],[11,"cmp","","",81,null],[11,"eq","","",80,null],[11,"eq","","",81,null],[11,"partial_cmp","","",80,null],[11,"partial_cmp","","",81,null],[11,"eq","","",80,null],[11,"partial_cmp","","",80,null],[11,"eq","collections::borrow","",82,null],[11,"eq","std::ffi::os_str","",81,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"partial_cmp","std::ffi::os_str","",81,null],[11,"eq","collections::borrow","",82,null],[11,"partial_cmp","","",82,null],[11,"eq","","",82,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"hash","","",81,null],[11,"fmt","","",81,null],[11,"borrow","","",80,null],[11,"to_owned","","",81,null],[11,"as_ref","","",81,null],[11,"as_ref","","",80,null],[11,"as_ref","collections::string","",83,null],[11,"clone","std::fs","",84,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"hash","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"open","","Attempts to open a file in read-only mode.",88,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",88,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",88,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",88,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",88,null],[11,"metadata","","Queries metadata about the underlying file.",88,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",88,null],[11,"fmt","","",88,null],[11,"read","","",88,null],[11,"read_to_end","","",88,null],[11,"write","","",88,null],[11,"flush","","",88,null],[11,"seek","","",88,null],[11,"new","","Creates a blank new set of options ready for configuration.",85,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",85,null],[11,"write","","Sets the option for write access.",85,null],[11,"append","","Sets the option for the append mode.",85,null],[11,"truncate","","Sets the option for truncating a previous file.",85,null],[11,"create","","Sets the option for creating a new file.",85,null],[11,"create_new","","Sets the option to always create a new file.",85,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",85,null],[11,"file_type","","Returns the file type for this metadata.",84,null],[11,"is_dir","","Returns whether this metadata is for a directory.",84,null],[11,"is_file","","Returns whether this metadata is for a regular file.",84,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",84,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",84,null],[11,"modified","","Returns the last modification time listed in this metadata.",84,null],[11,"accessed","","Returns the last access time of this metadata.",84,null],[11,"created","","Returns the creation time listed in the this metadata.",84,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",86,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",86,null],[11,"is_dir","","Test whether this file type represents a directory.",87,null],[11,"is_file","","Test whether this file type represents a regular file.",87,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",87,null],[11,"next","","",89,null],[11,"path","","Returns the full path to the file that this entry represents.",90,null],[11,"metadata","","Return the metadata for the file that this entry points at.",90,null],[11,"file_type","","Return the file type for the file that this entry points at.",90,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",90,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",91,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",91,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",91,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",92,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",92,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",92,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",92,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",92,null],[11,"read","","",92,null],[11,"fill_buf","","",92,null],[11,"consume","","",92,null],[11,"fmt","","",92,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",92,null],[11,"fmt","","",93,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",94,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",94,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",94,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",94,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",94,null],[11,"write","","",94,null],[11,"flush","","",94,null],[11,"fmt","","",94,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",94,null],[11,"drop","","",94,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",93,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",93,null],[11,"from","std::io::error","",79,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",93,null],[11,"fmt","","",93,null],[11,"new","","Creates a new `LineWriter`.",95,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",95,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",95,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",95,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",95,null],[11,"write","","",95,null],[11,"flush","","",95,null],[11,"fmt","","",95,null],[11,"fmt","std::io::cursor","",96,null],[11,"clone","","",96,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",96,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",96,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",96,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",96,null],[11,"position","","Returns the current position of this cursor.",96,null],[11,"set_position","","Sets the position of this cursor.",96,null],[11,"seek","","",96,null],[11,"read","","",96,null],[11,"fill_buf","","",96,null],[11,"consume","","",96,null],[11,"write","","",96,null],[11,"flush","","",96,null],[11,"write","","",96,null],[11,"flush","","",96,null],[11,"write","","",96,null],[11,"flush","","",96,null],[11,"fmt","std::io::error","",79,null],[11,"fmt","","",97,null],[11,"clone","","",97,null],[11,"eq","","",97,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",79,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",79,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",79,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",79,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",79,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",79,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",79,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",79,null],[11,"fmt","","",79,null],[11,"description","","",79,null],[11,"cause","","",79,null],[11,"read","alloc::boxed","",9,null],[11,"read_to_end","","",9,null],[11,"read_to_string","","",9,null],[11,"read_exact","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,null],[11,"write_all","","",9,null],[11,"write_fmt","","",9,null],[11,"seek","","",9,null],[11,"fill_buf","","",9,null],[11,"consume","","",9,null],[11,"read_until","","",9,null],[11,"read_line","","",9,null],[11,"write","collections::vec","",55,null],[11,"write_all","","",55,null],[11,"flush","","",55,null],[11,"read","std::io::util","",98,null],[11,"fill_buf","","",98,null],[11,"consume","","",98,null],[11,"read","","",99,null],[11,"write","","",100,null],[11,"flush","","",100,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",101,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",101,null],[11,"read","","",101,null],[11,"read_to_end","","",101,null],[11,"read_to_string","","",101,null],[11,"read_exact","","",101,null],[11,"read","","",102,null],[11,"read_to_end","","",102,null],[11,"fill_buf","","",102,null],[11,"consume","","",102,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",103,null],[11,"write","","",103,null],[11,"flush","","",103,null],[11,"write_all","","",103,null],[11,"write_fmt","","",103,null],[11,"write","","",104,null],[11,"flush","","",104,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",105,null],[11,"write","","",105,null],[11,"flush","","",105,null],[11,"write_all","","",105,null],[11,"write_fmt","","",105,null],[11,"write","","",106,null],[11,"flush","","",106,null],[11,"fmt","std::io","",107,null],[11,"clone","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"read","","",108,null],[11,"fill_buf","","",108,null],[11,"consume","","",108,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",109,null],[11,"read","","",109,null],[11,"fill_buf","","",109,null],[11,"consume","","",109,null],[11,"next","","",110,null],[11,"fmt","","",111,null],[11,"next","","",112,null],[11,"description","","",111,null],[11,"cause","","",111,null],[11,"fmt","","",111,null],[11,"next","","",113,null],[11,"next","","",114,null],[11,"cmp","std::net::ip","",115,null],[11,"partial_cmp","","",115,null],[11,"lt","","",115,null],[11,"le","","",115,null],[11,"gt","","",115,null],[11,"ge","","",115,null],[11,"hash","","",115,null],[11,"fmt","","",115,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"clone","","",115,null],[11,"fmt","","",116,null],[11,"hash","","",116,null],[11,"clone","","",116,null],[11,"eq","","",116,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",117,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",117,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (0.0.0.0).",117,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",117,null],[11,"is_private","","Returns true if this is a private address.",117,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",117,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",117,null],[11,"is_multicast","","Returns true if this is a multicast address (224.0.0.0/4).",117,null],[11,"is_broadcast","","Returns true if this is a broadcast address (255.255.255.255).",117,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",117,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",117,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",117,null],[11,"fmt","","",115,null],[11,"fmt","","",117,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"eq","","",117,null],[11,"hash","","",117,null],[11,"partial_cmp","","",117,null],[11,"cmp","","",117,null],[11,"from","","",117,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",117,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",118,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",118,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (::).",118,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",118,null],[11,"is_global","","Returns true if the address appears to be globally routable.",118,null],[11,"is_unique_local","","Returns true if this is a unique local address (fc00::/7).",118,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",118,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address\n(fec0::/10).",118,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\n(2001:db8::/32).",118,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",118,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",118,null],[11,"is_multicast","","Returns true if this is a multicast address (ff00::/8).",118,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",118,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",118,null],[11,"fmt","","",118,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"eq","","",118,null],[11,"hash","","",118,null],[11,"partial_cmp","","",118,null],[11,"cmp","","",118,null],[11,"from","","",118,null],[11,"fmt","std::net::addr","",119,null],[11,"hash","","",119,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"clone","","",119,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",119,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",119,null],[11,"set_ip","","Change the IP address associated with this socket address.",119,null],[11,"port","","Returns the port number associated with this socket address.",119,null],[11,"set_port","","Change the port number associated with this socket address.",119,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",120,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",120,null],[11,"set_ip","","Change the IP address associated with this socket address.",120,null],[11,"port","","Returns the port number associated with this socket address.",120,null],[11,"set_port","","Change the port number associated with this socket address.",120,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",121,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",121,null],[11,"set_ip","","Change the IP address associated with this socket address.",121,null],[11,"port","","Returns the port number associated with this socket address.",121,null],[11,"set_port","","Change the port number associated with this socket address.",121,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",121,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",121,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",121,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",121,null],[11,"fmt","","",119,null],[11,"fmt","","",120,null],[11,"fmt","","",120,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"clone","","",120,null],[11,"clone","","",121,null],[11,"eq","","",120,null],[11,"eq","","",121,null],[11,"hash","","",120,null],[11,"hash","","",121,null],[11,"to_socket_addrs","","",119,null],[11,"to_socket_addrs","","",120,null],[11,"to_socket_addrs","","",121,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",122,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",122,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",122,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",122,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",122,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",122,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",122,null],[11,"read_timeout","","Returns the read timeout of this socket.",122,null],[11,"write_timeout","","Returns the write timeout of this socket.",122,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",122,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",122,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",122,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",122,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",122,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",122,null],[11,"read","","",122,null],[11,"read_to_end","","",122,null],[11,"write","","",122,null],[11,"flush","","",122,null],[11,"fmt","","",122,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",123,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",123,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",123,null],[11,"accept","","Accept a new incoming connection from this listener.",123,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",123,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",123,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",123,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",123,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",123,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",123,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",123,null],[11,"next","","",124,null],[11,"fmt","","",123,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",125,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",125,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",125,null],[11,"local_addr","","Returns the socket address that this socket was created from.",125,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",125,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",125,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",125,null],[11,"read_timeout","","Returns the read timeout of this socket.",125,null],[11,"write_timeout","","Returns the write timeout of this socket.",125,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",125,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",125,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",125,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",125,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",125,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",125,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",125,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",125,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",125,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",125,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",125,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",125,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",125,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",125,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",125,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",125,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",125,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",125,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",125,null],[11,"fmt","","",125,null],[11,"from_str","std::net::ip","",115,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",117,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",118,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",120,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",121,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",119,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",126,null],[11,"fmt","","",126,null],[11,"description","","",126,null],[11,"fmt","std::net","",127,null],[11,"eq","","",127,null],[11,"clone","","",127,null],[11,"next","","",128,null],[11,"clone","std::os::linux::raw::arch","",129,null],[11,"as_raw_stat","std::fs","",84,null],[11,"st_dev","","",84,null],[11,"st_ino","","",84,null],[11,"st_mode","","",84,null],[11,"st_nlink","","",84,null],[11,"st_uid","","",84,null],[11,"st_gid","","",84,null],[11,"st_rdev","","",84,null],[11,"st_size","","",84,null],[11,"st_atime","","",84,null],[11,"st_atime_nsec","","",84,null],[11,"st_mtime","","",84,null],[11,"st_mtime_nsec","","",84,null],[11,"st_ctime","","",84,null],[11,"st_ctime_nsec","","",84,null],[11,"st_blksize","","",84,null],[11,"st_blocks","","",84,null],[11,"as_raw_fd","","",88,null],[11,"from_raw_fd","","",88,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",88,null],[11,"as_raw_fd","std::net::tcp","",122,null],[11,"as_raw_fd","","",123,null],[11,"as_raw_fd","std::net::udp","",125,null],[11,"from_raw_fd","std::net::tcp","",122,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",123,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",125,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",122,null],[11,"into_raw_fd","","",123,null],[11,"into_raw_fd","std::net::udp","",125,null],[11,"from_vec","std::ffi::os_str","",80,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",80,null],[11,"from_bytes","","",81,null],[11,"as_bytes","","",81,null],[11,"mode","std::fs","",86,null],[11,"set_mode","","",86,null],[11,"from_mode","","",86,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",85,null],[11,"custom_flags","","",85,null],[11,"dev","","",84,null],[11,"ino","","",84,null],[11,"mode","","",84,null],[11,"nlink","","",84,null],[11,"uid","","",84,null],[11,"gid","","",84,null],[11,"rdev","","",84,null],[11,"size","","",84,null],[11,"atime","","",84,null],[11,"atime_nsec","","",84,null],[11,"mtime","","",84,null],[11,"mtime_nsec","","",84,null],[11,"ctime","","",84,null],[11,"ctime_nsec","","",84,null],[11,"blksize","","",84,null],[11,"blocks","","",84,null],[11,"is_block_device","","",87,null],[11,"is_char_device","","",87,null],[11,"is_fifo","","",87,null],[11,"is_socket","","",87,null],[11,"ino","","",90,null],[11,"mode","","",91,null],[11,"uid","std::process","",130,null],[11,"gid","","",130,null],[11,"before_exec","","",130,null],[11,"exec","","",130,null],[11,"from_raw","","",131,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",131,null],[11,"from_raw_fd","","",132,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",133,null],[11,"as_raw_fd","","",134,null],[11,"as_raw_fd","","",135,null],[11,"into_raw_fd","","",133,null],[11,"into_raw_fd","","",134,null],[11,"into_raw_fd","","",135,null],[11,"as_pthread_t","std::thread","",28,null],[11,"into_pthread_t","","",28,null],[11,"clone","std::sys::ext::net","",136,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",136,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",136,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"connect","","Connects to the socket named by `path`.",137,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",137,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",137,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",137,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",137,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",137,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",137,null],[11,"read_timeout","","Returns the read timeout of this socket.",137,null],[11,"write_timeout","","Returns the write timeout of this socket.",137,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",137,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",137,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",137,null],[11,"read","","",137,null],[11,"read_to_end","","",137,null],[11,"write","","",137,null],[11,"flush","","",137,null],[11,"as_raw_fd","","",137,null],[11,"from_raw_fd","","",137,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",137,null],[11,"fmt","","",138,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",138,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",138,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",138,null],[11,"local_addr","","Returns the local socket address of this listener.",138,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",138,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",138,null],[11,"incoming","","Returns an iterator over incoming connections.",138,null],[11,"as_raw_fd","","",138,null],[11,"from_raw_fd","","",138,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",138,null],[11,"fmt","","",139,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"fmt","","",140,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",140,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",140,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",140,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",140,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",140,null],[11,"local_addr","","Returns the address of this socket.",140,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",140,null],[11,"recv_from","","Receives data from the socket.",140,null],[11,"recv","","Receives data from the socket.",140,null],[11,"send_to","","Sends data on the socket to the specified address.",140,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",140,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",140,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",140,null],[11,"read_timeout","","Returns the read timeout of this socket.",140,null],[11,"write_timeout","","Returns the write timeout of this socket.",140,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",140,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",140,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",140,null],[11,"as_raw_fd","","",140,null],[11,"from_raw_fd","","",140,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",140,null],[11,"deref","std::panic","",141,null],[11,"deref_mut","","",141,null],[11,"call_once","","",141,null],[11,"eq","std::path","",142,null],[11,"ne","","",142,null],[11,"cmp","","",142,null],[11,"partial_cmp","","",142,null],[11,"lt","","",142,null],[11,"le","","",142,null],[11,"gt","","",142,null],[11,"ge","","",142,null],[11,"hash","","",142,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"kind","","The parsed prefix data.",143,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",143,null],[11,"eq","","",143,null],[11,"partial_cmp","","",143,null],[11,"cmp","","",143,null],[11,"hash","","",143,null],[11,"fmt","","",144,null],[11,"hash","","",144,null],[11,"cmp","","",144,null],[11,"partial_cmp","","",144,null],[11,"lt","","",144,null],[11,"le","","",144,null],[11,"gt","","",144,null],[11,"ge","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",144,null],[11,"as_ref","","",144,null],[11,"clone","","",145,null],[11,"clone","","",146,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",145,null],[11,"as_ref","","",145,null],[11,"as_ref","","",145,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",146,null],[11,"as_ref","","",146,null],[11,"as_ref","","",146,null],[11,"next","","",146,null],[11,"next_back","","",146,null],[11,"next","","",145,null],[11,"next_back","","",145,null],[11,"eq","","",145,null],[11,"partial_cmp","","",145,null],[11,"cmp","","",145,null],[11,"clone","","",147,null],[11,"new","","Allocates an empty `PathBuf`.",147,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",147,null],[11,"push","","Extends `self` with `path`.",147,null],[11,"pop","","Truncate `self` to `self.parent()`.",147,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",147,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",147,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",147,null],[11,"from","","",147,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",147,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",147,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",147,null],[11,"fmt","","",147,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",148,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",148,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",148,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",148,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",148,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",148,null],[11,"is_relative","","A path is *relative* if it is not absolute.",148,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",148,null],[11,"parent","","The path without its final component, if any.",148,null],[11,"file_name","","The final component of the path, if it is a normal file.",148,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",148,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",148,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",148,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",148,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",148,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",148,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",148,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",148,null],[11,"components","","Produce an iterator over the components of the path.",148,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",148,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",148,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",148,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",148,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",148,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",148,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",148,null],[11,"exists","","Returns whether the path points at an existing entity.",148,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",148,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",148,null],[11,"deref","","",147,null],[11,"borrow","","",147,null],[11,"from","collections::borrow","",82,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",82,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",148,null],[11,"eq","","",147,null],[11,"hash","","",147,null],[11,"partial_cmp","","",147,null],[11,"cmp","","",147,null],[11,"as_ref","","",147,null],[11,"into","","",147,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",149,null],[11,"as_ref","","",148,null],[11,"fmt","","",148,null],[11,"fmt","","",150,null],[11,"fmt","","",150,null],[11,"eq","","",148,null],[11,"hash","","",148,null],[11,"partial_cmp","","",148,null],[11,"cmp","","",148,null],[11,"as_ref","","",148,null],[11,"as_ref","std::ffi::os_str","",81,null],[11,"as_ref","collections::borrow","",82,null],[11,"as_ref","std::ffi::os_str","",80,null],[11,"as_ref","collections::string","",83,null],[11,"as_ref","std::path","",147,null],[11,"eq","","",147,null],[11,"eq","","",148,null],[11,"partial_cmp","","",147,null],[11,"partial_cmp","","",148,null],[11,"eq","","",147,null],[11,"partial_cmp","","",147,null],[11,"eq","collections::borrow","",82,null],[11,"eq","std::path","",148,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"partial_cmp","std::path","",148,null],[11,"eq","collections::borrow","",82,null],[11,"partial_cmp","","",82,null],[11,"eq","","",82,null],[11,"eq","std::path","",147,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"partial_cmp","std::path","",147,null],[11,"eq","","",147,null],[11,"eq","std::ffi::os_str","",81,null],[11,"partial_cmp","std::path","",147,null],[11,"partial_cmp","std::ffi::os_str","",81,null],[11,"eq","std::path","",147,null],[11,"partial_cmp","","",147,null],[11,"eq","","",147,null],[11,"eq","collections::borrow","",82,null],[11,"partial_cmp","std::path","",147,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"eq","std::path","",147,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","std::path","",147,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"eq","std::path","",148,null],[11,"eq","std::ffi::os_str","",81,null],[11,"partial_cmp","std::path","",148,null],[11,"partial_cmp","std::ffi::os_str","",81,null],[11,"eq","std::path","",148,null],[11,"partial_cmp","","",148,null],[11,"eq","","",148,null],[11,"eq","collections::borrow","",82,null],[11,"partial_cmp","std::path","",148,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"eq","std::path","",148,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","std::path","",148,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"eq","","",81,null],[11,"partial_cmp","","",81,null],[11,"eq","collections::borrow","",82,null],[11,"partial_cmp","","",82,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","","",80,null],[11,"eq","collections::borrow","",82,null],[11,"eq","std::ffi::os_str","",81,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"partial_cmp","std::ffi::os_str","",81,null],[11,"eq","collections::borrow","",82,null],[11,"partial_cmp","","",82,null],[11,"eq","","",82,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","collections::borrow","",82,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"fmt","std::path","",149,null],[11,"description","","",149,null],[11,"write","std::process","",133,null],[11,"flush","","",133,null],[11,"read","","",134,null],[11,"read_to_end","","",134,null],[11,"read","","",135,null],[11,"read_to_end","","",135,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",130,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",130,null],[11,"args","","Add multiple arguments to pass to the program.",130,null],[11,"env","","Inserts or updates an environment variable mapping.",130,null],[11,"env_remove","","Removes an environment variable mapping.",130,null],[11,"env_clear","","Clears the entire environment map for the child process.",130,null],[11,"current_dir","","Sets the working directory for the child process.",130,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",130,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",130,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",130,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",130,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",130,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",130,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",130,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"fmt","","",151,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",132,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",132,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",132,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",131,null],[11,"code","","Returns the exit code of the process, if any.",131,null],[11,"fmt","","",131,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",152,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",152,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",152,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",152,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",153,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",153,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",153,null],[11,"id","","Retrieves the id of this handle.",154,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",154,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",154,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",154,null],[11,"drop","","",153,null],[11,"drop","","",154,null],[11,"fmt","","",153,null],[11,"fmt","","",154,null],[11,"clone","std::sync::mpsc","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"eq","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"eq","","",157,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"eq","","",158,null],[11,"clone","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",160,null],[11,"clone","","",160,null],[11,"drop","","",160,null],[11,"fmt","","",160,null],[11,"send","","Sends a value on this synchronous channel.",161,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",161,null],[11,"clone","","",161,null],[11,"drop","","",161,null],[11,"fmt","","",161,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",162,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",162,null],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up, or if it waits more than `timeout`.",162,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",162,null],[11,"next","","",163,null],[11,"next","","",164,null],[11,"into_iter","","",162,null],[11,"drop","","",162,null],[11,"fmt","","",162,null],[11,"fmt","","",155,null],[11,"fmt","","",155,null],[11,"description","","",155,null],[11,"cause","","",155,null],[11,"fmt","","",159,null],[11,"fmt","","",159,null],[11,"description","","",159,null],[11,"cause","","",159,null],[11,"fmt","","",156,null],[11,"description","","",156,null],[11,"cause","","",156,null],[11,"fmt","","",157,null],[11,"description","","",157,null],[11,"cause","","",157,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",165,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",165,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",166,null],[11,"clone","std::sync::condvar","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"fmt","","",167,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",167,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",168,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",168,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",168,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",168,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",168,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",168,null],[11,"default","","",168,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",168,null],[11,"new","","Creates a new condition variable",169,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",169,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",169,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",169,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",169,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",169,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",169,null],[11,"drop","std::sync::mutex","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",8,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",170,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",170,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",170,null],[11,"destroy","","Deallocates resources associated with this static mutex.",170,null],[11,"deref","","",171,null],[11,"deref_mut","","",171,null],[11,"drop","","",171,null],[11,"new","std::sync::once","Creates a new `Once` value.",172,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",172,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",172,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",173,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",174,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",174,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",174,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",174,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",174,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",174,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",174,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",174,null],[11,"drop","","",174,null],[11,"fmt","","",174,null],[11,"default","","",174,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",175,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",175,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",175,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",175,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",175,null],[11,"destroy","","Deallocates all resources associated with this static lock.",175,null],[11,"deref","","",176,null],[11,"deref","","",177,null],[11,"deref_mut","","",177,null],[11,"drop","","",176,null],[11,"drop","","",177,null],[11,"default","core::sync::atomic","",178,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",179,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",180,null],[11,"clone","","",180,null],[11,"new","","Creates a new `AtomicBool`.",178,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",178,null],[11,"store","","Stores a value into the bool.",178,null],[11,"swap","","Stores a value into the bool, returning the old value.",178,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",178,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",178,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",178,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",178,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",178,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",178,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",178,null],[11,"new","","Creates a new `AtomicPtr`.",179,null],[11,"load","","Loads a value from the pointer.",179,null],[11,"store","","Stores a value into the pointer.",179,null],[11,"swap","","Stores a value into the pointer, returning the old value.",179,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",179,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",179,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",179,null],[11,"default","","",181,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",181,null],[11,"new","","Creates a new atomic integer.",181,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",181,null],[11,"store","","Stores a value into the atomic integer.",181,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",181,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"fetch_add","","Add to the current value, returning the previous value.",181,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",181,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",181,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",181,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",181,null],[11,"default","","",182,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",182,null],[11,"new","","Creates a new atomic integer.",182,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",182,null],[11,"store","","Stores a value into the atomic integer.",182,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",182,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",182,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",182,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",182,null],[11,"fetch_add","","Add to the current value, returning the previous value.",182,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",182,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",182,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",182,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",182,null],[11,"default","","",183,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",183,null],[11,"new","","Creates a new atomic integer.",183,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",183,null],[11,"store","","Stores a value into the atomic integer.",183,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",183,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",183,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",183,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",183,null],[11,"fetch_add","","Add to the current value, returning the previous value.",183,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",183,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",183,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",183,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",183,null],[11,"default","","",184,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",184,null],[11,"new","","Creates a new atomic integer.",184,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",184,null],[11,"store","","Stores a value into the atomic integer.",184,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",184,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",184,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",184,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",184,null],[11,"fetch_add","","Add to the current value, returning the previous value.",184,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",184,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",184,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",184,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",184,null],[11,"default","","",185,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",185,null],[11,"new","","Creates a new atomic integer.",185,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",185,null],[11,"store","","Stores a value into the atomic integer.",185,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",185,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",185,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",185,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",185,null],[11,"fetch_add","","Add to the current value, returning the previous value.",185,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",185,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",185,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",185,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",185,null],[11,"default","","",186,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",186,null],[11,"new","","Creates a new atomic integer.",186,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",186,null],[11,"store","","Stores a value into the atomic integer.",186,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",186,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",186,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",186,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",186,null],[11,"fetch_add","","Add to the current value, returning the previous value.",186,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",186,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",186,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",186,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",186,null],[11,"default","","",187,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",187,null],[11,"new","","Creates a new atomic integer.",187,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",187,null],[11,"store","","Stores a value into the atomic integer.",187,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",187,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"fetch_add","","Add to the current value, returning the previous value.",187,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",187,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",187,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",187,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",187,null],[11,"default","","",188,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",188,null],[11,"new","","Creates a new atomic integer.",188,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",188,null],[11,"store","","Stores a value into the atomic integer.",188,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",188,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"fetch_add","","Add to the current value, returning the previous value.",188,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",188,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",188,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",188,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",188,null],[11,"default","","",189,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",189,null],[11,"new","","Creates a new atomic integer.",189,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",189,null],[11,"store","","Stores a value into the atomic integer.",189,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",189,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"fetch_add","","Add to the current value, returning the previous value.",189,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",189,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",189,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",189,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",189,null],[11,"default","","",190,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",190,null],[11,"new","","Creates a new atomic integer.",190,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",190,null],[11,"store","","Stores a value into the atomic integer.",190,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",190,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"fetch_add","","Add to the current value, returning the previous value.",190,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",190,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",190,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",190,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",190,null],[11,"fmt","","",178,null],[11,"fmt","","",179,null],[11,"hash","std::time::duration","",191,null],[11,"fmt","","",191,null],[11,"cmp","","",191,null],[11,"partial_cmp","","",191,null],[11,"lt","","",191,null],[11,"le","","",191,null],[11,"gt","","",191,null],[11,"ge","","",191,null],[11,"eq","","",191,null],[11,"ne","","",191,null],[11,"clone","","",191,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",191,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",191,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",191,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",191,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",191,null],[11,"add","","",191,null],[11,"add_assign","","",191,null],[11,"sub","","",191,null],[11,"sub_assign","","",191,null],[11,"mul","","",191,null],[11,"mul_assign","","",191,null],[11,"div","","",191,null],[11,"div_assign","","",191,null],[11,"cmp","std::time","",192,null],[11,"partial_cmp","","",192,null],[11,"lt","","",192,null],[11,"le","","",192,null],[11,"gt","","",192,null],[11,"ge","","",192,null],[11,"eq","","",192,null],[11,"ne","","",192,null],[11,"clone","","",192,null],[11,"cmp","","",193,null],[11,"partial_cmp","","",193,null],[11,"lt","","",193,null],[11,"le","","",193,null],[11,"gt","","",193,null],[11,"ge","","",193,null],[11,"eq","","",193,null],[11,"ne","","",193,null],[11,"clone","","",193,null],[11,"fmt","","",194,null],[11,"clone","","",194,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",192,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",192,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",192,null],[11,"add","","",192,null],[11,"add_assign","","",192,null],[11,"sub","","",192,null],[11,"sub_assign","","",192,null],[11,"sub","","",192,null],[11,"fmt","","",192,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",193,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",193,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",193,null],[11,"add","","",193,null],[11,"add_assign","","",193,null],[11,"sub","","",193,null],[11,"sub_assign","","",193,null],[11,"fmt","","",193,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",194,null],[11,"description","","",194,null],[11,"fmt","","",194,null],[11,"fmt","std::sys_common::poison","",195,null],[11,"fmt","","",195,null],[11,"description","","",195,null],[11,"new","","Creates a `PoisonError`.",195,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",195,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",195,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",195,null],[11,"from","","",196,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",196,null],[11,"fmt","","",196,null],[11,"description","","",196,null],[11,"cause","","",196,null],[11,"clone","libc::unix","",197,null],[11,"clone","","",198,null],[11,"clone","","",199,null],[11,"clone","","",200,null],[11,"clone","","",201,null],[11,"clone","","",202,null],[11,"clone","","",203,null],[11,"clone","","",204,null],[11,"clone","","",205,null],[11,"clone","","",206,null],[11,"clone","","",207,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"clone","libc::unix::notbsd","",210,null],[11,"clone","","",211,null],[11,"clone","","",212,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"clone","","",215,null],[11,"clone","","",216,null],[11,"clone","","",217,null],[11,"clone","","",218,null],[11,"clone","","",219,null],[11,"clone","","",220,null],[11,"clone","","",221,null],[11,"clone","","",222,null],[11,"clone","","",223,null],[11,"clone","","",224,null],[11,"clone","libc::unix::notbsd::linux","",225,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"clone","","",228,null],[11,"clone","","",229,null],[11,"clone","","",230,null],[11,"clone","","",231,null],[11,"clone","","",232,null],[11,"clone","","",233,null],[11,"clone","","",234,null],[11,"clone","","",235,null],[11,"clone","","",236,null],[11,"clone","","",237,null],[11,"clone","","",238,null],[11,"clone","","",239,null],[11,"clone","","",240,null],[11,"clone","libc::unix::notbsd::linux::other","",241,null],[11,"clone","","",242,null],[11,"clone","","",243,null],[11,"clone","","",244,null],[11,"clone","","",245,null],[11,"clone","","",246,null],[11,"clone","","",247,null],[11,"clone","","",248,null],[11,"clone","","",249,null],[11,"clone","","",250,null],[11,"clone","","",251,null],[11,"clone","libc::unix::notbsd::linux::other::b32","",252,null],[11,"clone","","",253,null],[11,"clone","","",254,null],[11,"clone","","",255,null],[11,"clone","","",256,null],[11,"clone","libc::unix::notbsd::linux::other::b32::x86","",257,null],[11,"clone","","",258,null],[11,"clone","","",259,null],[11,"clone","","",260,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",261,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",261,null],[11,"file","","Returns the name of the source file from which the panic originated.",262,null],[11,"line","","Returns the line number from which the panic originated.",262,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",263,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",263,null],[11,"set","","Sets the contained value.",263,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",263,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",263,null],[11,"clone","","",263,null],[11,"default","","",263,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",263,null],[11,"partial_cmp","","",263,null],[11,"lt","","",263,null],[11,"le","","",263,null],[11,"gt","","",263,null],[11,"ge","","",263,null],[11,"cmp","","",263,null],[11,"fmt","","",264,null],[11,"eq","","",264,null],[11,"clone","","",264,null],[11,"new","","Creates a new `RefCell` containing `value`.",265,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",265,null],[11,"borrow_state","","Query the current state of this `RefCell`",265,null],[11,"borrow","","Immutably borrows the wrapped value.",265,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",265,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",265,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",265,null],[11,"clone","","",265,null],[11,"default","","",265,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",265,null],[11,"partial_cmp","","",265,null],[11,"lt","","",265,null],[11,"le","","",265,null],[11,"gt","","",265,null],[11,"ge","","",265,null],[11,"cmp","","",265,null],[11,"deref","","",266,null],[11,"clone","","Copies a `Ref`.",266,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",266,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",267,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",267,null],[11,"deref_mut","","",267,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",268,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",268,null],[11,"get","","Gets a mutable pointer to the wrapped value.",268,null],[11,"default","","",268,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"hash","core::marker","",269,null],[11,"eq","","",269,null],[11,"partial_cmp","","",269,null],[11,"cmp","","",269,null],[11,"clone","","",269,null],[11,"default","","",269,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",270,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",270,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",270,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Creates a new `Weak&lt;T&gt;` reference from this value.",270,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",270,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",270,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",270,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",270,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",270,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",270,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",270,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",270,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",270,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",270,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",270,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",270,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",270,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",270,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",270,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",270,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",270,null],[11,"hash","","",270,null],[11,"fmt","","",270,null],[11,"fmt","","",270,null],[11,"fmt","","",270,null],[11,"from","","",270,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",271,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",271,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",271,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",271,null],[11,"fmt","","",271,null],[11,"default","","",271,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",270,null],[11,"as_ref","","",270,null],[11,"next","rustc_unicode::char","",272,null],[11,"next","","",273,null],[11,"clone","","",274,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"next","","",274,null],[11,"size_hint","","",274,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",18,null],[11,"fmt","","",18,null],[11,"clone","core::raw","",275,null],[11,"hash","core::option","",276,null],[11,"fmt","","",276,null],[11,"cmp","","",276,null],[11,"partial_cmp","","",276,null],[11,"lt","","",276,null],[11,"le","","",276,null],[11,"gt","","",276,null],[11,"ge","","",276,null],[11,"eq","","",276,null],[11,"ne","","",276,null],[11,"clone","","",276,null],[11,"is_some","","Returns `true` if the option is a `Some` value",276,null],[11,"is_none","","Returns `true` if the option is a `None` value",276,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",276,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",276,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",276,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",276,null],[11,"unwrap_or","","Returns the contained value or a default.",276,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",276,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",276,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",276,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",276,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",276,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",276,null],[11,"iter","","Returns an iterator over the possibly contained value.",276,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",276,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",276,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",276,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",276,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",276,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",276,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",276,null],[11,"unwrap_or_default","","Returns the contained value or a default",276,null],[11,"default","","",276,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",276,null],[11,"fmt","","",277,null],[11,"next","","",277,null],[11,"size_hint","","",277,null],[11,"next_back","","",277,null],[11,"clone","","",277,null],[11,"fmt","","",278,null],[11,"next","","",278,null],[11,"size_hint","","",278,null],[11,"next_back","","",278,null],[11,"fmt","","",279,null],[11,"clone","","",279,null],[11,"next","","",279,null],[11,"size_hint","","",279,null],[11,"next_back","","",279,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",276,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"hash","core::cmp","",280,null],[11,"fmt","","",280,null],[11,"eq","","",280,null],[11,"clone","","",280,null],[11,"reverse","","Reverse the `Ordering`.",280,null],[11,"cmp","","",280,null],[11,"partial_cmp","","",280,null],[11,"fmt","goodgame_empire_import","",281,null],[11,"fmt","","",281,null],[11,"is","","Returns true if the boxed type is the same as `T`",281,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",281,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",281,null],[11,"is","","Forwards to the method defined on the type `Any`.",281,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",281,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",281,null],[11,"hash","core::any","",282,null],[11,"fmt","","",282,null],[11,"eq","","",282,null],[11,"ne","","",282,null],[11,"clone","","",282,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",282,{"inputs":[],"output":{"name":"typeid"}}],[11,"cmp","collections::string","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"new","","Creates a new empty `String`.",83,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",83,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",83,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",83,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",83,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",83,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",83,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",83,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",83,null],[11,"as_str","","Extracts a string slice containing the entire string.",83,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",83,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",83,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",83,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",83,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",83,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",83,null],[11,"push","","Appends the given `char` to the end of this `String`.",83,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",83,null],[11,"truncate","","Shortens this `String` to the specified length.",83,null],[11,"pop","","Removes the last character from the string buffer and returns it.",83,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",83,null],[11,"insert","","Inserts a character into this `String` at a byte position.",83,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",83,null],[11,"len","","Returns the length of this `String`, in bytes.",83,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",83,null],[11,"clear","","Truncates this `String`, removing all contents.",83,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",83,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",83,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",15,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",15,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"clone","","",83,null],[11,"clone_from","","",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",83,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",83,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","collections::borrow","",82,null],[11,"ne","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"eq","collections::string","",83,null],[11,"ne","","",83,null],[11,"default","","",83,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",83,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"add","","",83,null],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"deref","","",83,null],[11,"deref_mut","","",83,null],[11,"from_str","","",83,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"as_ref","","",83,null],[11,"as_ref","","",83,null],[11,"from","","",83,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",82,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",82,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",83,null],[11,"write_str","","",83,null],[11,"write_char","","",83,null],[11,"drop","","",283,null],[11,"next","","",283,null],[11,"size_hint","","",283,null],[11,"next_back","","",283,null],[11,"borrow","collections::vec","",55,null],[11,"borrow_mut","","",55,null],[11,"hash","core::result","",284,null],[11,"fmt","","",284,null],[11,"cmp","","",284,null],[11,"partial_cmp","","",284,null],[11,"lt","","",284,null],[11,"le","","",284,null],[11,"gt","","",284,null],[11,"ge","","",284,null],[11,"eq","","",284,null],[11,"ne","","",284,null],[11,"clone","","",284,null],[11,"is_ok","","Returns true if the result is `Ok`",284,null],[11,"is_err","","Returns true if the result is `Err`",284,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",284,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",284,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",284,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",284,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",284,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",284,null],[11,"iter","","Returns an iterator over the possibly contained value.",284,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",284,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",284,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",284,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",284,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",284,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",284,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",284,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",284,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",284,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",284,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",284,null],[11,"fmt","","",285,null],[11,"next","","",285,null],[11,"size_hint","","",285,null],[11,"next_back","","",285,null],[11,"clone","","",285,null],[11,"fmt","","",286,null],[11,"next","","",286,null],[11,"size_hint","","",286,null],[11,"next_back","","",286,null],[11,"fmt","","",287,null],[11,"next","","",287,null],[11,"size_hint","","",287,null],[11,"next_back","","",287,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",284,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",288,null],[11,"get","","Dereferences the content.",288,null],[11,"get_mut","","Mutably dereferences the content.",288,null],[11,"deref","","",288,null],[11,"fmt","","",288,null],[11,"new","","Creates a new `Shared`.",289,null],[11,"clone","","",289,null],[11,"deref","","",289,null],[11,"fmt","","",289,null],[11,"clone","collections::str","",290,null],[11,"next","","",290,null],[11,"size_hint","","",290,null],[11,"borrow","collections::string","",83,null],[11,"fmt","core::str::pattern","",291,null],[11,"eq","","",291,null],[11,"ne","","",291,null],[11,"clone","","",291,null],[11,"fmt","","",292,null],[11,"clone","","",292,null],[11,"haystack","","",292,null],[11,"next","","",292,null],[11,"next_match","","",292,null],[11,"next_reject","","",292,null],[11,"next_back","","",292,null],[11,"next_match_back","","",292,null],[11,"next_reject_back","","",292,null],[11,"fmt","","",293,null],[11,"clone","","",293,null],[11,"haystack","","",293,null],[11,"next","","",293,null],[11,"next_match","","",293,null],[11,"next_reject","","",293,null],[11,"next_back","","",293,null],[11,"next_match_back","","",293,null],[11,"next_reject_back","","",293,null],[11,"clone","","",294,null],[11,"fmt","","",294,null],[11,"haystack","","",294,null],[11,"next","","",294,null],[11,"next_match","","",294,null],[11,"next_reject","","",294,null],[11,"next_back","","",294,null],[11,"next_match_back","","",294,null],[11,"next_reject_back","","",294,null],[11,"fmt","","",295,null],[11,"clone","","",295,null],[11,"haystack","","",295,null],[11,"next","","",295,null],[11,"next_match","","",295,null],[11,"next_back","","",295,null],[11,"next_match_back","","",295,null],[11,"borrow","collections::borrow","",82,null],[11,"clone","","",82,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",82,null],[11,"into_owned","","Extracts the owned data.",82,null],[11,"deref","","",82,null],[11,"cmp","","",82,null],[11,"eq","","",82,null],[11,"partial_cmp","","",82,null],[11,"fmt","","",82,null],[11,"fmt","","",82,null],[11,"default","","",82,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",82,null],[11,"as_ref","","",82,null],[11,"hash","core::ops","",296,null],[11,"eq","","",296,null],[11,"clone","","",296,null],[11,"fmt","","",296,null],[11,"hash","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"clone","","",297,null],[11,"fmt","","",297,null],[11,"contains","","# Examples",297,null],[11,"hash","","",298,null],[11,"eq","","",298,null],[11,"ne","","",298,null],[11,"clone","","",298,null],[11,"fmt","","",298,null],[11,"contains","","# Examples",298,null],[11,"hash","","",299,null],[11,"eq","","",299,null],[11,"ne","","",299,null],[11,"clone","","",299,null],[11,"fmt","","",299,null],[11,"contains","","# Examples",299,null],[11,"hash","","",300,null],[11,"eq","","",300,null],[11,"ne","","",300,null],[11,"clone","","",300,null],[11,"fmt","","",300,null],[11,"contains","","# Examples",300,null],[11,"hash","","",301,null],[11,"eq","","",301,null],[11,"ne","","",301,null],[11,"clone","","",301,null],[11,"fmt","","",301,null],[11,"contains","","# Examples",301,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",55,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",55,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",55,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",55,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",55,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",55,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",55,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",55,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",55,null],[11,"as_slice","","Extracts a slice containing the entire vector.",55,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",55,null],[11,"set_len","","Sets the length of a vector.",55,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",55,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",55,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",55,null],[11,"retain","","Retains only the elements specified by the predicate.",55,null],[11,"push","","Appends an element to the back of a collection.",55,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",55,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",55,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",55,null],[11,"clear","","Clears the vector, removing all values.",55,null],[11,"len","","Returns the number of elements in the vector.",55,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",55,null],[11,"split_off","","Splits the collection into two at the given index.",55,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",55,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",55,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",55,null],[11,"clone","","",55,null],[11,"clone_from","","",55,null],[11,"hash","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"deref","","",55,null],[11,"deref_mut","","",55,null],[11,"from_iter","","",55,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",55,null],[11,"extend","","",55,null],[11,"extend","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","collections::borrow","",82,null],[11,"ne","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"eq","collections::vec","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"partial_cmp","","",55,null],[11,"cmp","","",55,null],[11,"drop","","",55,null],[11,"default","","",55,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",55,null],[11,"as_ref","","",55,null],[11,"as_mut","","",55,null],[11,"as_ref","","",55,null],[11,"as_mut","","",55,null],[11,"from","","",55,null],[11,"from","","",55,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",82,null],[11,"from","","",82,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",82,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",302,null],[11,"size_hint","","",302,null],[11,"count","","",302,null],[11,"next_back","","",302,null],[11,"clone","","",302,null],[11,"drop","","",302,null],[11,"next","","",303,null],[11,"size_hint","","",303,null],[11,"next_back","","",303,null],[11,"drop","","",303,null],[11,"fmt","core::iter::range","",304,null],[11,"clone","","",304,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",298,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",297,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",300,null],[11,"next","core::iter::range","",304,null],[11,"size_hint","","",304,null],[11,"next","","",304,null],[11,"size_hint","","",304,null],[11,"next","","",304,null],[11,"size_hint","","",304,null],[11,"next","core::ops","",297,null],[11,"size_hint","","",297,null],[11,"next_back","","",297,null],[11,"next","","",298,null],[11,"next","","",300,null],[11,"size_hint","","",300,null],[11,"next_back","","",300,null],[11,"fmt","core::iter::sources","",305,null],[11,"clone","","",305,null],[11,"next","","",305,null],[11,"size_hint","","",305,null],[11,"next_back","","",305,null],[11,"fmt","","",306,null],[11,"next","","",306,null],[11,"size_hint","","",306,null],[11,"next_back","","",306,null],[11,"len","","",306,null],[11,"clone","","",306,null],[11,"default","","",306,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",307,null],[11,"clone","","",307,null],[11,"next","","",307,null],[11,"size_hint","","",307,null],[11,"next_back","","",307,null],[11,"len","","",307,null],[11,"fmt","core::iter","",308,null],[11,"clone","","",308,null],[11,"next","","",308,null],[11,"size_hint","","",308,null],[11,"next_back","","",308,null],[11,"fmt","","",309,null],[11,"clone","","",309,null],[11,"next","","",309,null],[11,"size_hint","","",309,null],[11,"next_back","","",309,null],[11,"fmt","","",310,null],[11,"clone","","",310,null],[11,"next","","",310,null],[11,"size_hint","","",310,null],[11,"fmt","","",311,null],[11,"clone","","",311,null],[11,"next","","",311,null],[11,"count","","",311,null],[11,"nth","","",311,null],[11,"find","","",311,null],[11,"last","","",311,null],[11,"size_hint","","",311,null],[11,"next_back","","",311,null],[11,"fmt","","",312,null],[11,"clone","","",312,null],[11,"next","","",312,null],[11,"size_hint","","",312,null],[11,"next_back","","",312,null],[11,"clone","","",313,null],[11,"fmt","","",313,null],[11,"next","","",313,null],[11,"size_hint","","",313,null],[11,"next_back","","",313,null],[11,"clone","","",314,null],[11,"fmt","","",314,null],[11,"next","","",314,null],[11,"size_hint","","",314,null],[11,"next_back","","",314,null],[11,"clone","","",315,null],[11,"fmt","","",315,null],[11,"next","","",315,null],[11,"size_hint","","",315,null],[11,"next_back","","",315,null],[11,"fmt","","",316,null],[11,"clone","","",316,null],[11,"next","","# Overflow Behavior",316,null],[11,"size_hint","","",316,null],[11,"nth","","",316,null],[11,"count","","",316,null],[11,"next_back","","",316,null],[11,"fmt","","",317,null],[11,"clone","","",317,null],[11,"next","","",317,null],[11,"count","","",317,null],[11,"nth","","",317,null],[11,"last","","",317,null],[11,"size_hint","","",317,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",317,null],[11,"is_empty","","Checks if the iterator has finished iterating.",317,null],[11,"clone","","",318,null],[11,"fmt","","",318,null],[11,"next","","",318,null],[11,"size_hint","","",318,null],[11,"clone","","",319,null],[11,"fmt","","",319,null],[11,"next","","",319,null],[11,"size_hint","","",319,null],[11,"fmt","","",320,null],[11,"clone","","",320,null],[11,"next","","",320,null],[11,"nth","","",320,null],[11,"count","","",320,null],[11,"last","","",320,null],[11,"size_hint","","",320,null],[11,"next_back","","",320,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"next","","",321,null],[11,"nth","","",321,null],[11,"size_hint","","",321,null],[11,"clone","","",322,null],[11,"fmt","","",322,null],[11,"next","","",322,null],[11,"size_hint","","",322,null],[11,"clone","","",323,null],[11,"fmt","","",323,null],[11,"next","","",323,null],[11,"size_hint","","",323,null],[11,"next_back","","",323,null],[11,"fmt","","",324,null],[11,"clone","","",324,null],[11,"next","","",324,null],[11,"nth","","",324,null],[11,"last","","",324,null],[11,"count","","",324,null],[11,"size_hint","","",324,null],[11,"next_back","","",324,null],[11,"clone","","",325,null],[11,"fmt","","",325,null],[11,"next","","",325,null],[11,"size_hint","","",325,null],[11,"next_back","","",325,null],[11,"clone","alloc::boxed","",326,null],[11,"pointer","","",327,null],[11,"make_place","","",327,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",327,null],[11,"finalize","","",9,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",326,null],[11,"drop","","",327,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",9,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",9,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",9,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"ge","","",9,null],[11,"gt","","",9,null],[11,"cmp","","",9,null],[11,"hash","","",9,null],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"call_once","","",9,null],[11,"call_once","","",9,null],[11,"clone","","",9,null],[11,"borrow","","",9,null],[11,"borrow_mut","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"default","core::hash::sip","",328,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",328,null],[11,"fmt","","",328,null],[11,"default","","",329,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",329,null],[11,"fmt","","",329,null],[11,"default","","",330,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",330,null],[11,"fmt","","",330,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",330,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",330,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",328,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",328,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",329,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",329,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",330,null],[11,"finish","","",330,null],[11,"write","","",328,null],[11,"finish","","",328,null],[11,"write","","",329,null],[11,"finish","","",329,null],[11,"fmt","core::hash","",331,null],[11,"build_hasher","","",331,null],[11,"clone","","",331,null],[11,"default","","",331,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"deref","goodgame_empire_import::data","",332,null],[11,"encode","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",7,null],[11,"from_int","","Get world from internal integer",7,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"encode","","",4,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"encode","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"encode","","",6,null],[11,"fmt","","",6,null],[11,"new","","Create new data manager",6,{"inputs":[],"output":{"name":"self"}}],[11,"add_castle","","Add the data of the specified castle",6,null],[11,"add_owner_name","","Add the name of the specified user",6,null],[0,"gbd","goodgame_empire_import","Data reader",null,null],[3,"FieldAinM","goodgame_empire_import::gbd","The alliance member data",null,null],[12,"oid","","Internal id",333,null],[12,"n","","Username",333,null],[12,"ap","","Base castles",333,null],[12,"vp","","Support castles",333,null],[3,"Gbd","","Main data",null,null],[12,"gpi","","User data",334,null],[12,"ain","","Alliance member castles",334,null],[8,"CastleParse","","Can parse castles",null,null],[10,"parse","","Parse castle",335,{"inputs":[{"name":"json"},{"name":"u64"}],"output":{"name":"result"}}],[11,"parse","goodgame_empire_import::data","",4,{"inputs":[{"name":"json"},{"name":"u64"}],"output":{"name":"result"}}],[11,"clone","goodgame_empire_import::gbd","",333,null],[11,"fmt","","",333,null],[11,"parse","","Parse json data",333,{"inputs":[{"name":"json"}],"output":{"name":"result"}}],[11,"clone","","",334,null],[11,"fmt","","",334,null],[11,"parse","","Parse text returned from the server",334,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[0,"map","goodgame_empire_import","Map reader",null,null],[3,"Gaa","goodgame_empire_import::map","Map data",null,null],[12,"kid","","World",336,null],[12,"uap","","Metadata",336,null],[12,"oi","","",336,null],[12,"ai","","",336,null],[12,"users","","",336,null],[12,"castles","","",336,null],[12,"castle_names","","",336,null],[11,"clone","","",336,null],[11,"fmt","","",336,null],[11,"parse","","Parse text returned from the server",336,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[0,"smartfox","goodgame_empire_import","Smartfoxserver client",null,null],[3,"SmartFoxPacket","goodgame_empire_import::smartfox","",null,null],[12,"data","","",337,null],[3,"SmartFoxClient","","Goodgame empire connection",null,null],[12,"stream","","",338,null],[5,"SmartFoxPacket","","Create a SmartFoxServer packet from a string",null,{"inputs":[{"name":"t"}],"output":{"name":"smartfoxpacket"}}],[11,"fmt","","",337,null],[11,"new","","Create a new connection",338,{"inputs":[{"name":"tcpstream"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"send_packet","","Send a zero terminated packet",338,null],[11,"read_packets","","Read zero terminated packets",338,null],[0,"connection","goodgame_empire_import","Goodgame empire connection",null,null],[3,"Connection","goodgame_empire_import::connection","Goodgame empire connection",null,null],[3,"DUTCH_SERVER","","The Dutch server (37.48.88.129)",null,null],[11,"deref","","",339,null],[11,"new","","Create a new connection",340,{"inputs":[{"name":"ipaddr"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"send_packet","","Send gge packet",340,null],[11,"read_packets","","Read gge packets",340,null]],"paths":[[4,"Error"],[4,"JsonError"],[4,"ServerPacket"],[4,"ClientPacket"],[3,"Castle"],[3,"User"],[3,"DataMgr"],[4,"World"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[8,"Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"_libc_fpreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"PhantomData"],[3,"Rc"],[3,"Weak"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"TraitObject"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"Drain"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Unique"],[3,"Shared"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[3,"IntoIter"],[3,"Drain"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"DATAMGR"],[3,"FieldAinM"],[3,"Gbd"],[8,"CastleParse"],[3,"Gaa"],[3,"SmartFoxPacket"],[3,"SmartFoxClient"],[3,"DUTCH_SERVER"],[3,"Connection"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","regex::bytes","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["byte_stream_splitter"] = {"doc":"","items":[[3,"ByteStreamSplitter","byte_stream_splitter","",null,null],[4,"SplitType","","",null,null],[13,"Prefix","","",0,null],[13,"FullMatch","","",0,null],[13,"Suffix","","",0,null],[4,"SplitError","","",null,null],[13,"Io","","",1,null],[13,"Internal","","",1,null],[6,"SplitResult","","",null,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",2,null],[11,"next_to_buf","","",2,null],[11,"next","","",2,null]],"paths":[[4,"SplitType"],[4,"SplitError"],[3,"ByteStreamSplitter"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",118,null],[10,"deref","","The method called to dereference a value",118,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",119,null],[12,"1","","",119,null],[11,"get","","",119,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"__Deref"],[3,"Lazy"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,null],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,null],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,null],[11,"split_off","","Splits the collection into two at the given index.",7,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"drop","collections::binary_heap","",8,null],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"clone","","",9,null],[11,"clone_from","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",9,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",9,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",9,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",9,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",9,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",9,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",9,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",9,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",9,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",9,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",9,null],[11,"push","","Pushes an item onto the binary heap.",9,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",9,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",9,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",9,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",9,null],[11,"len","","Returns the length of the binary heap.",9,null],[11,"is_empty","","Checks if the binary heap is empty.",9,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",9,null],[11,"clear","","Drops all items from the binary heap.",9,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",9,null],[11,"clone","","",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"clone","","",11,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null],[11,"from","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",9,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",9,null],[11,"extend","","",9,null],[11,"extend","","",9,null],[11,"drop","collections::btree::map","",13,null],[11,"clone","","",13,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",13,null],[11,"get","","Returns a reference to the value corresponding to the key.",13,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13,null],[11,"insert","","Inserts a key-value pair into the map.",13,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",13,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",13,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",13,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",13,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"len","","",14,null],[11,"clone","","",14,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"len","","",15,null],[11,"into_iter","","",13,null],[11,"drop","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next_back","","",16,null],[11,"len","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"next_back","","",17,null],[11,"len","","",17,null],[11,"clone","","",17,null],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"next_back","","",18,null],[11,"len","","",18,null],[11,"clone","","",18,null],[11,"next","","",19,null],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"next_back","","",20,null],[11,"len","","",20,null],[11,"next_back","","",19,null],[11,"clone","","",19,null],[11,"next","","",21,null],[11,"next_back","","",21,null],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",13,null],[11,"extend","","",13,null],[11,"hash","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",13,null],[11,"partial_cmp","","",13,null],[11,"cmp","","",13,null],[11,"fmt","","",13,null],[11,"index","","",13,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",13,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",13,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",13,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",13,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",13,null],[11,"len","","Returns the number of elements in the map.",13,null],[11,"is_empty","","Returns true if the map contains no elements.",13,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",22,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",22,null],[11,"key","","Returns a reference to this entry&#39;s key.",22,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",23,null],[11,"into_key","","Take ownership of the key.",23,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",23,null],[11,"key","","Gets a reference to the key in the entry.",24,null],[11,"remove_pair","","Take ownership of the key and value from the map.",24,null],[11,"get","","Gets a reference to the value in the entry.",24,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",24,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",24,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",24,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",24,null],[11,"partial_cmp","collections::btree::set","",25,null],[11,"lt","","",25,null],[11,"le","","",25,null],[11,"gt","","",25,null],[11,"ge","","",25,null],[11,"cmp","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"hash","","",25,null],[11,"clone","","",25,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",25,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",25,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",25,null],[11,"difference","","Visits the values representing the difference, in ascending order.",25,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",25,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",25,null],[11,"union","","Visits the values representing the union, in ascending order.",25,null],[11,"len","","Returns the number of elements in the set.",25,null],[11,"is_empty","","Returns true if the set contains no elements.",25,null],[11,"clear","","Clears the set, removing all values.",25,null],[11,"contains","","Returns `true` if the set contains a value.",25,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",25,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",25,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",25,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",25,null],[11,"insert","","Adds a value to the set.",25,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",25,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",25,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",25,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",25,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",25,null],[11,"from_iter","","",25,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",25,null],[11,"extend","","",25,null],[11,"extend","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",25,null],[11,"clone","","",26,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"next_back","","",26,null],[11,"len","","",26,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"next_back","","",27,null],[11,"len","","",27,null],[11,"clone","","",28,null],[11,"next","","",28,null],[11,"next_back","","",28,null],[11,"clone","","",29,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"clone","","",30,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"clone","","",31,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"clone","","",32,null],[11,"next","","",32,null],[11,"size_hint","","",32,null],[11,"borrow","collections::borrow","",33,null],[11,"clone","","",33,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",33,null],[11,"into_owned","","Extracts the owned data.",33,null],[11,"deref","","",33,null],[11,"cmp","","",33,null],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"fmt","","",33,null],[11,"fmt","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",33,null],[11,"as_ref","","",33,null],[11,"hash","collections::enum_set","",34,null],[11,"cmp","","",34,null],[11,"partial_cmp","","",34,null],[11,"lt","","",34,null],[11,"le","","",34,null],[11,"gt","","",34,null],[11,"ge","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"new","","Returns an empty `EnumSet`.",34,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",34,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",34,null],[11,"clear","","",34,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",34,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",34,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",34,null],[11,"union","","Returns the union of both `EnumSets`.",34,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",34,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",34,null],[11,"remove","","Removes an enum from the EnumSet",34,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",34,null],[11,"iter","","Returns an iterator over an `EnumSet`.",34,null],[11,"sub","","",34,null],[11,"bitor","","",34,null],[11,"bitand","","",34,null],[11,"bitxor","","",34,null],[11,"clone","","",35,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"from_iter","","",34,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",34,null],[11,"extend","","",34,null],[11,"clone","collections::linked_list","",36,null],[11,"clone","","",37,null],[11,"default","","",38,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",38,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",38,null],[11,"iter","","Provides a forward iterator.",38,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",38,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",38,null],[11,"len","","Returns the length of the `LinkedList`.",38,null],[11,"clear","","Removes all elements from the `LinkedList`.",38,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",38,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",38,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",38,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",38,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",38,null],[11,"push_front","","Adds an element first in the list.",38,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",38,null],[11,"push_back","","Appends an element to the back of a list",38,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",38,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",38,null],[11,"front_place","","Returns a place for insertion at the front of the list.",38,null],[11,"back_place","","Returns a place for insertion at the back of the list.",38,null],[11,"drop","","",38,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"next_back","","",36,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"next_back","","",39,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",39,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",39,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"from_iter","","",38,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",38,null],[11,"extend","","",38,null],[11,"extend","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"partial_cmp","","",38,null],[11,"cmp","","",38,null],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"hash","","",38,null],[11,"make_place","","",40,null],[11,"pointer","","",40,null],[11,"finalize","","",40,null],[11,"make_place","","",41,null],[11,"pointer","","",41,null],[11,"finalize","","",41,null],[11,"start","core::ops","",42,null],[11,"end","","",43,null],[11,"start","","",44,null],[11,"end","","",44,null],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"borrow","collections::string","",46,null],[11,"fmt","core::str::pattern","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"haystack","","",48,null],[11,"next","","",48,null],[11,"next_match","","",48,null],[11,"next_reject","","",48,null],[11,"next_back","","",48,null],[11,"next_match_back","","",48,null],[11,"next_reject_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"haystack","","",49,null],[11,"next","","",49,null],[11,"next_match","","",49,null],[11,"next_reject","","",49,null],[11,"next_back","","",49,null],[11,"next_match_back","","",49,null],[11,"next_reject_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"haystack","","",50,null],[11,"next","","",50,null],[11,"next_match","","",50,null],[11,"next_reject","","",50,null],[11,"next_back","","",50,null],[11,"next_match_back","","",50,null],[11,"next_reject_back","","",50,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"haystack","","",51,null],[11,"next","","",51,null],[11,"next_match","","",51,null],[11,"next_back","","",51,null],[11,"next_match_back","","",51,null],[11,"cmp","collections::string","",46,null],[11,"partial_cmp","","",46,null],[11,"lt","","",46,null],[11,"le","","",46,null],[11,"gt","","",46,null],[11,"ge","","",46,null],[11,"fmt","","",52,null],[11,"fmt","","",53,null],[11,"new","","Creates a new empty `String`.",46,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",46,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",46,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",46,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",46,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",46,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",46,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",46,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",46,null],[11,"as_str","","Extracts a string slice containing the entire string.",46,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",46,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",46,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",46,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",46,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",46,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",46,null],[11,"push","","Appends the given `char` to the end of this `String`.",46,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",46,null],[11,"truncate","","Shortens this `String` to the specified length.",46,null],[11,"pop","","Removes the last character from the string buffer and returns it.",46,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",46,null],[11,"insert","","Inserts a character into this `String` at a byte position.",46,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",46,null],[11,"len","","Returns the length of this `String`, in bytes.",46,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",46,null],[11,"clear","","Truncates this `String`, removing all contents.",46,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",46,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",46,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",52,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",52,null],[11,"fmt","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",46,null],[11,"clone_from","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","collections::borrow","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","collections::string","",46,null],[11,"ne","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",46,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"add","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"from_str","","",46,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"fmt","","",54,null],[11,"eq","","",54,null],[11,"as_ref","","",46,null],[11,"as_ref","","",46,null],[11,"from","","",46,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",33,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",33,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",46,null],[11,"write_str","","",46,null],[11,"write_char","","",46,null],[11,"drop","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next_back","","",55,null],[11,"clone","collections::vec","",7,null],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,null],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"cmp","","",7,null],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",33,null],[11,"from","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",56,null],[11,"size_hint","","",56,null],[11,"count","","",56,null],[11,"next_back","","",56,null],[11,"clone","","",56,null],[11,"drop","","",56,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"drop","","",57,null],[11,"clone","collections::vec_deque","",58,null],[11,"drop","","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",58,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",58,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",58,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",58,null],[11,"swap","","Swaps elements at indices `i` and `j`.",58,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",58,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",58,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",58,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",58,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",58,null],[11,"iter","","Returns a front-to-back iterator.",58,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",58,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",58,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",58,null],[11,"len","","Returns the number of elements in the `VecDeque`.",58,null],[11,"is_empty","","Returns true if the buffer contains no elements",58,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",58,null],[11,"clear","","Clears the buffer, removing all values.",58,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",58,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",58,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",58,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",58,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",58,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",58,null],[11,"push_front","","Inserts an element first in the sequence.",58,null],[11,"push_back","","Appends an element to the back of a buffer",58,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",58,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",58,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",58,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",58,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",58,null],[11,"split_off","","Splits the collection into two at the given index.",58,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",58,null],[11,"retain","","Retains only the elements specified by the predicate.",58,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",58,null],[11,"clone","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"drop","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"eq","","",58,null],[11,"partial_cmp","","",58,null],[11,"cmp","","",58,null],[11,"hash","","",58,null],[11,"index","","",58,null],[11,"index_mut","","",58,null],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",58,null],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"fmt","","",58,null],[11,"from","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",63,null],[11,"ne","","",63,null],[11,"hash","","",63,null],[11,"fmt","","",63,null],[11,"clone","","",63,null],[11,"clone","alloc::boxed","",64,null],[11,"pointer","","",65,null],[11,"make_place","","",65,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",65,null],[11,"finalize","","",66,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",64,null],[11,"drop","","",65,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",66,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",66,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",66,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",66,null],[11,"clone","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"partial_cmp","","",66,null],[11,"lt","","",66,null],[11,"le","","",66,null],[11,"ge","","",66,null],[11,"gt","","",66,null],[11,"cmp","","",66,null],[11,"hash","","",66,null],[11,"from","","",66,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",66,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",66,null],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"deref","","",66,null],[11,"deref_mut","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"call_once","","",66,null],[11,"call_once","","",66,null],[11,"clone","","",66,null],[11,"borrow","","",66,null],[11,"borrow_mut","","",66,null],[11,"as_ref","","",66,null],[11,"as_mut","","",66,null],[11,"deref","regex_syntax","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"new","","Create a new builder for configuring expression parsing.",69,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",69,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",69,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",69,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",69,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",69,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",69,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",69,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",69,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",69,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",67,null],[11,"into_iter","","",67,null],[11,"new","","Create a new class from an existing set of ranges.",67,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",67,null],[11,"remove","","Removes the given character from the class if it exists.",67,null],[11,"negate","","Negates the character class.",67,null],[11,"case_fold","","Apply case folding to this character class.",67,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",68,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",68,null],[11,"remove","","Removes the given byte from the class if it exists.",68,null],[11,"negate","","Negates the byte class.",68,null],[11,"case_fold","","Apply case folding to this byte class.",68,null],[11,"deref","","",68,null],[11,"into_iter","","",68,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",67,null],[11,"fmt","","",0,null],[11,"fmt","","",68,null],[11,"fmt","","",1,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"fmt","","",70,null],[11,"clone","","",70,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",70,null],[11,"kind","","Returns the type of the regex parse error.",70,null],[11,"description","","",70,null],[11,"fmt","","",70,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_frsize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_favail","","",35,null],[12,"f_fsid","","",35,null],[12,"__f_unused","","",35,null],[12,"f_flag","","",35,null],[12,"f_namemax","","",35,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",36,null],[12,"dqb_bsoftlimit","","",36,null],[12,"dqb_curspace","","",36,null],[12,"dqb_ihardlimit","","",36,null],[12,"dqb_isoftlimit","","",36,null],[12,"dqb_curinodes","","",36,null],[12,"dqb_btime","","",36,null],[12,"dqb_itime","","",36,null],[12,"dqb_valid","","",36,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",37,null],[12,"ssi_errno","","",37,null],[12,"ssi_code","","",37,null],[12,"ssi_pid","","",37,null],[12,"ssi_uid","","",37,null],[12,"ssi_fd","","",37,null],[12,"ssi_tid","","",37,null],[12,"ssi_band","","",37,null],[12,"ssi_overrun","","",37,null],[12,"ssi_trapno","","",37,null],[12,"ssi_status","","",37,null],[12,"ssi_int","","",37,null],[12,"ssi_ptr","","",37,null],[12,"ssi_utime","","",37,null],[12,"ssi_stime","","",37,null],[12,"ssi_addr","","",37,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",38,null],[12,"mq_maxmsg","","",38,null],[12,"mq_msgsize","","",38,null],[12,"mq_curmsgs","","",38,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",39,null],[12,"if_name","","",39,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",40,null],[12,"sa_mask","","",40,null],[12,"sa_flags","","",40,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",41,null],[12,"ss_flags","","",41,null],[12,"ss_size","","",41,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",42,null],[12,"si_errno","","",42,null],[12,"si_code","","",42,null],[12,"_pad","","",42,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",43,null],[12,"gl_pathv","","",43,null],[12,"gl_offs","","",43,null],[12,"gl_flags","","",43,null],[3,"ucred","","",null,null],[12,"pid","","",44,null],[12,"uid","","",44,null],[12,"gid","","",44,null],[3,"statfs","","",null,null],[12,"f_type","","",45,null],[12,"f_bsize","","",45,null],[12,"f_blocks","","",45,null],[12,"f_bfree","","",45,null],[12,"f_bavail","","",45,null],[12,"f_files","","",45,null],[12,"f_ffree","","",45,null],[12,"f_fsid","","",45,null],[12,"f_namelen","","",45,null],[12,"f_frsize","","",45,null],[3,"msghdr","","",null,null],[12,"msg_name","","",46,null],[12,"msg_namelen","","",46,null],[12,"msg_iov","","",46,null],[12,"msg_iovlen","","",46,null],[12,"msg_control","","",46,null],[12,"msg_controllen","","",46,null],[12,"msg_flags","","",46,null],[3,"termios","","",null,null],[12,"c_iflag","","",47,null],[12,"c_oflag","","",47,null],[12,"c_cflag","","",47,null],[12,"c_lflag","","",47,null],[12,"c_line","","",47,null],[12,"c_cc","","",47,null],[12,"c_ispeed","","",47,null],[12,"c_ospeed","","",47,null],[3,"flock","","",null,null],[12,"l_type","","",48,null],[12,"l_whence","","",48,null],[12,"l_start","","",48,null],[12,"l_len","","",48,null],[12,"l_pid","","",48,null],[3,"ipc_perm","","",null,null],[12,"__key","","",49,null],[12,"uid","","",49,null],[12,"gid","","",49,null],[12,"cuid","","",49,null],[12,"cgid","","",49,null],[12,"mode","","",49,null],[12,"__seq","","",49,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",50,null],[12,"shm_segsz","","",50,null],[12,"shm_atime","","",50,null],[12,"shm_dtime","","",50,null],[12,"shm_ctime","","",50,null],[12,"shm_cpid","","",50,null],[12,"shm_lpid","","",50,null],[12,"shm_nattch","","",50,null],[3,"sem_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",51,null],[12,"st_ino","","",51,null],[12,"st_mode","","",51,null],[12,"st_nlink","","",51,null],[12,"st_uid","","",51,null],[12,"st_gid","","",51,null],[12,"st_rdev","","",51,null],[12,"st_size","","",51,null],[12,"st_blksize","","",51,null],[12,"st_blocks","","",51,null],[12,"st_atime","","",51,null],[12,"st_atime_nsec","","",51,null],[12,"st_mtime","","",51,null],[12,"st_mtime_nsec","","",51,null],[12,"st_ctime","","",51,null],[12,"st_ctime_nsec","","",51,null],[3,"stat64","","",null,null],[12,"st_dev","","",52,null],[12,"st_mode","","",52,null],[12,"st_nlink","","",52,null],[12,"st_uid","","",52,null],[12,"st_gid","","",52,null],[12,"st_rdev","","",52,null],[12,"st_size","","",52,null],[12,"st_blksize","","",52,null],[12,"st_blocks","","",52,null],[12,"st_atime","","",52,null],[12,"st_atime_nsec","","",52,null],[12,"st_mtime","","",52,null],[12,"st_mtime_nsec","","",52,null],[12,"st_ctime","","",52,null],[12,"st_ctime_nsec","","",52,null],[12,"st_ino","","",52,null],[3,"pthread_attr_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",53,null],[12,"loads","","",53,null],[12,"totalram","","",53,null],[12,"freeram","","",53,null],[12,"sharedram","","",53,null],[12,"bufferram","","",53,null],[12,"totalswap","","",53,null],[12,"freeswap","","",53,null],[12,"procs","","",53,null],[12,"pad","","",53,null],[12,"totalhigh","","",53,null],[12,"freehigh","","",53,null],[12,"mem_unit","","",53,null],[12,"_f","","",53,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",54,null],[12,"e_exit","","",54,null],[3,"utmpx","","",null,null],[12,"ut_type","","",55,null],[12,"ut_pid","","",55,null],[12,"ut_line","","",55,null],[12,"ut_id","","",55,null],[12,"ut_user","","",55,null],[12,"ut_host","","",55,null],[12,"ut_exit","","",55,null],[12,"ut_session","","",55,null],[12,"ut_tv","","",55,null],[12,"ut_addr_v6","","",55,null],[3,"_libc_fpreg","","",null,null],[12,"significand","","",56,null],[12,"exponent","","",56,null],[3,"_libc_fpstate","","",null,null],[12,"cw","","",57,null],[12,"sw","","",57,null],[12,"tag","","",57,null],[12,"ipoff","","",57,null],[12,"cssel","","",57,null],[12,"dataoff","","",57,null],[12,"datasel","","",57,null],[12,"_st","","",57,null],[12,"status","","",57,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",58,null],[12,"fpregs","","",58,null],[12,"oldmask","","",58,null],[12,"cr2","","",58,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",59,null],[12,"uc_link","","",59,null],[12,"uc_stack","","",59,null],[12,"uc_mcontext","","",59,null],[12,"uc_sigmask","","",59,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",60,null],[11,"is_none","","Returns `true` if the option is a `None` value",60,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",60,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",60,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",60,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",60,null],[11,"unwrap_or","","Returns the contained value or a default.",60,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",60,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",60,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",60,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",60,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",60,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",60,null],[11,"iter","","Returns an iterator over the possibly contained value.",60,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",60,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",60,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",60,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",60,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",60,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",60,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",60,null],[11,"unwrap_or_default","","Returns the contained value or a default",60,null],[11,"hash","core::num","",61,null],[11,"default","","",61,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",61,null],[11,"cmp","","",61,null],[11,"partial_cmp","","",61,null],[11,"lt","","",61,null],[11,"le","","",61,null],[11,"gt","","",61,null],[11,"ge","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"shl","","",61,null],[11,"shl_assign","","",61,null],[11,"shr","","",61,null],[11,"shr_assign","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"add","","",61,null],[11,"add_assign","","",61,null],[11,"sub","","",61,null],[11,"sub_assign","","",61,null],[11,"mul","","",61,null],[11,"mul_assign","","",61,null],[11,"div","","",61,null],[11,"div_assign","","",61,null],[11,"rem","","",61,null],[11,"rem_assign","","",61,null],[11,"not","","",61,null],[11,"bitxor","","",61,null],[11,"bitxor_assign","","",61,null],[11,"bitor","","",61,null],[11,"bitor_assign","","",61,null],[11,"bitand","","",61,null],[11,"bitand_assign","","",61,null],[11,"neg","","",61,null],[11,"eq","core::num::dec2flt","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"fmt","core::num","",63,null],[11,"eq","","",63,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"fmt","","",64,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"hash","core::nonzero","",66,null],[11,"fmt","","",66,null],[11,"partial_cmp","","",66,null],[11,"lt","","",66,null],[11,"le","","",66,null],[11,"gt","","",66,null],[11,"ge","","",66,null],[11,"cmp","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",66,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",66,null],[11,"new","core::ptr","Creates a new `Unique`.",67,null],[11,"get","","Dereferences the content.",67,null],[11,"get_mut","","Mutably dereferences the content.",67,null],[11,"deref","","",67,null],[11,"fmt","","",67,null],[11,"new","","Creates a new `Shared`.",68,null],[11,"clone","","",68,null],[11,"deref","","",68,null],[11,"fmt","","",68,null],[11,"hash","core::marker","",69,null],[11,"eq","","",69,null],[11,"partial_cmp","","",69,null],[11,"cmp","","",69,null],[11,"clone","","",69,null],[11,"default","","",69,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",70,null],[11,"eq","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"hash","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"contains","","# Examples",71,null],[11,"hash","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"contains","","# Examples",72,null],[11,"hash","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"contains","","# Examples",73,null],[11,"hash","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"contains","","# Examples",74,null],[11,"hash","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",75,null],[11,"contains","","# Examples",75,null],[11,"hash","core::cmp","",76,null],[11,"fmt","","",76,null],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"reverse","","Reverse the `Ordering`.",76,null],[11,"cmp","","",76,null],[11,"partial_cmp","","",76,null],[11,"fmt","libc","",77,null],[11,"fmt","","",77,null],[11,"is","","Returns true if the boxed type is the same as `T`",77,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",77,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",77,null],[11,"is","","Forwards to the method defined on the type `Any`.",77,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",77,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",77,null],[11,"hash","core::any","",78,null],[11,"fmt","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",78,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",79,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"new","","Creates a new `AtomicBool`.",79,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",79,null],[11,"store","","Stores a value into the bool.",79,null],[11,"swap","","Stores a value into the bool, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",79,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",79,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",79,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",79,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",79,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",79,null],[11,"new","","Creates a new `AtomicPtr`.",80,null],[11,"load","","Loads a value from the pointer.",80,null],[11,"store","","Stores a value into the pointer.",80,null],[11,"swap","","Stores a value into the pointer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",80,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",80,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"default","","",83,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",83,null],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",83,null],[11,"store","","Stores a value into the atomic integer.",83,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"fetch_add","","Add to the current value, returning the previous value.",83,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"default","","",89,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",89,null],[11,"new","","Creates a new atomic integer.",89,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",89,null],[11,"store","","Stores a value into the atomic integer.",89,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",89,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"fetch_add","","Add to the current value, returning the previous value.",89,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",89,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",89,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",89,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",89,null],[11,"default","","",90,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",90,null],[11,"new","","Creates a new atomic integer.",90,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",90,null],[11,"store","","Stores a value into the atomic integer.",90,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",90,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"fetch_add","","Add to the current value, returning the previous value.",90,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",90,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",90,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",90,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",90,null],[11,"default","","",91,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",91,null],[11,"new","","Creates a new atomic integer.",91,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",91,null],[11,"store","","Stores a value into the atomic integer.",91,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",91,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"fetch_add","","Add to the current value, returning the previous value.",91,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",91,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",91,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",91,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",91,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",92,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",92,null],[11,"set","","Sets the contained value.",92,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",92,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",92,null],[11,"clone","","",92,null],[11,"default","","",92,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",92,null],[11,"partial_cmp","","",92,null],[11,"lt","","",92,null],[11,"le","","",92,null],[11,"gt","","",92,null],[11,"ge","","",92,null],[11,"cmp","","",92,null],[11,"fmt","","",93,null],[11,"eq","","",93,null],[11,"clone","","",93,null],[11,"new","","Creates a new `RefCell` containing `value`.",94,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",94,null],[11,"borrow_state","","Query the current state of this `RefCell`",94,null],[11,"borrow","","Immutably borrows the wrapped value.",94,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",94,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",94,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",94,null],[11,"clone","","",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",94,null],[11,"partial_cmp","","",94,null],[11,"lt","","",94,null],[11,"le","","",94,null],[11,"gt","","",94,null],[11,"ge","","",94,null],[11,"cmp","","",94,null],[11,"deref","","",95,null],[11,"clone","","Copies a `Ref`.",95,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",95,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",96,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",96,null],[11,"deref_mut","","",96,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",97,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",97,null],[11,"get","","Gets a mutable pointer to the wrapped value.",97,null],[11,"default","","",97,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",98,null],[11,"clone","","",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"count","","",98,null],[11,"last","","",98,null],[11,"len","","",98,null],[11,"fmt","","",99,null],[11,"clone","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"count","","",99,null],[11,"nth","","",99,null],[11,"last","","",99,null],[11,"len","","",99,null],[11,"fmt","","",100,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"fmt","","",101,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"fmt","core::iter::range","",102,null],[11,"clone","","",102,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",72,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",71,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",74,null],[11,"next","core::iter::range","",102,null],[11,"size_hint","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next","core::ops","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"next","","",72,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","core::iter::sources","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"len","","",104,null],[11,"clone","","",104,null],[11,"default","","",104,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"len","","",105,null],[11,"fmt","core::iter","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"next","","",109,null],[11,"count","","",109,null],[11,"nth","","",109,null],[11,"find","","",109,null],[11,"last","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"clone","","",111,null],[11,"fmt","","",111,null],[11,"next","","",111,null],[11,"size_hint","","",111,null],[11,"next_back","","",111,null],[11,"clone","","",112,null],[11,"fmt","","",112,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"next_back","","",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"next_back","","",113,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"next","","# Overflow Behavior",114,null],[11,"size_hint","","",114,null],[11,"nth","","",114,null],[11,"count","","",114,null],[11,"next_back","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"count","","",115,null],[11,"nth","","",115,null],[11,"last","","",115,null],[11,"size_hint","","",115,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",115,null],[11,"is_empty","","Checks if the iterator has finished iterating.",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"next","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"next","","",118,null],[11,"nth","","",118,null],[11,"count","","",118,null],[11,"last","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"nth","","",119,null],[11,"size_hint","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"clone","","",121,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"next","","",122,null],[11,"nth","","",122,null],[11,"last","","",122,null],[11,"count","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"clone","","",123,null],[11,"fmt","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"hash","core::option","",60,null],[11,"fmt","","",60,null],[11,"cmp","","",60,null],[11,"partial_cmp","","",60,null],[11,"lt","","",60,null],[11,"le","","",60,null],[11,"gt","","",60,null],[11,"ge","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"default","","",60,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",60,null],[11,"fmt","","",124,null],[11,"next","","",124,null],[11,"size_hint","","",124,null],[11,"next_back","","",124,null],[11,"clone","","",124,null],[11,"fmt","","",125,null],[11,"next","","",125,null],[11,"size_hint","","",125,null],[11,"next_back","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"next_back","","",126,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",60,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",127,null],[11,"hash","core::result","",128,null],[11,"fmt","","",128,null],[11,"cmp","","",128,null],[11,"partial_cmp","","",128,null],[11,"lt","","",128,null],[11,"le","","",128,null],[11,"gt","","",128,null],[11,"ge","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"is_ok","","Returns true if the result is `Ok`",128,null],[11,"is_err","","Returns true if the result is `Err`",128,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",128,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",128,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",128,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",128,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",128,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",128,null],[11,"iter","","Returns an iterator over the possibly contained value.",128,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",128,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",128,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",128,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",128,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",128,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",128,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",128,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",128,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",128,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",128,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"clone","","",129,null],[11,"fmt","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next_back","","",130,null],[11,"fmt","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",128,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",132,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"count","","",132,null],[11,"nth","","",132,null],[11,"last","","",132,null],[11,"next_back","","",132,null],[11,"clone","","",132,null],[11,"fmt","","",133,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"count","","",133,null],[11,"nth","","",133,null],[11,"last","","",133,null],[11,"next_back","","",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next_back","","",134,null],[11,"fmt","","",135,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next_back","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"fmt","","",138,null],[11,"fmt","","",139,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"fmt","","",140,null],[11,"clone","","",140,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"count","","",140,null],[11,"nth","","",140,null],[11,"last","","",140,null],[11,"next_back","","",140,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"count","","",141,null],[11,"nth","","",141,null],[11,"last","","",141,null],[11,"next_back","","",141,null],[11,"fmt","","",142,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"count","","",142,null],[11,"nth","","",142,null],[11,"last","","",142,null],[11,"next_back","","",142,null],[11,"fmt","core::str::pattern","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"clone","","",143,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[11,"haystack","","",144,null],[11,"next","","",144,null],[11,"next_match","","",144,null],[11,"next_reject","","",144,null],[11,"next_back","","",144,null],[11,"next_match_back","","",144,null],[11,"next_reject_back","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"haystack","","",145,null],[11,"next","","",145,null],[11,"next_match","","",145,null],[11,"next_reject","","",145,null],[11,"next_back","","",145,null],[11,"next_match_back","","",145,null],[11,"next_reject_back","","",145,null],[11,"clone","","",146,null],[11,"fmt","","",146,null],[11,"haystack","","",146,null],[11,"next","","",146,null],[11,"next_match","","",146,null],[11,"next_reject","","",146,null],[11,"next_back","","",146,null],[11,"next_match_back","","",146,null],[11,"next_reject_back","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"haystack","","",147,null],[11,"next","","",147,null],[11,"next_match","","",147,null],[11,"next_back","","",147,null],[11,"next_match_back","","",147,null],[11,"eq","core::str","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"fmt","","",148,null],[11,"fmt","","",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",149,null],[11,"fmt","","",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"next_back","","",150,null],[11,"as_str","","View the underlying data as a subslice of the original data.",150,null],[11,"fmt","","",151,null],[11,"clone","","",151,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"next_back","","",151,null],[11,"as_str","","View the underlying data as a subslice of the original data.",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"count","","",152,null],[11,"last","","",152,null],[11,"nth","","",152,null],[11,"next_back","","",152,null],[11,"len","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"next_back","","",153,null],[11,"next_back","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"next_back","","",155,null],[11,"next_back","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"next_back","","",159,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"next","","",161,null],[11,"clone","","",161,null],[11,"fmt","","",162,null],[11,"next","","",162,null],[11,"clone","","",162,null],[11,"next_back","","",161,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"next","","",163,null],[11,"size_hint","","",163,null],[11,"next_back","","",163,null],[11,"fmt","","",164,null],[11,"clone","","",164,null],[11,"next","","",164,null],[11,"size_hint","","",164,null],[11,"next_back","","",164,null],[11,"default","core::hash::sip","",165,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",165,null],[11,"fmt","","",165,null],[11,"default","","",166,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",166,null],[11,"fmt","","",166,null],[11,"default","","",167,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",167,null],[11,"fmt","","",167,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",167,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",167,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",165,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",165,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",166,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",166,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",167,null],[11,"finish","","",167,null],[11,"write","","",165,null],[11,"finish","","",165,null],[11,"write","","",166,null],[11,"finish","","",166,null],[11,"fmt","core::hash","",168,null],[11,"build_hasher","","",168,null],[11,"clone","","",168,null],[11,"default","","",168,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",169,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",170,null],[11,"finish","","Finishes output and returns any error encountered.",170,null],[11,"field","","Adds a new field to the generated tuple struct output.",171,null],[11,"finish","","Finishes output and returns any error encountered.",171,null],[11,"entry","","Adds a new entry to the set output.",172,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",172,null],[11,"finish","","Finishes output and returns any error encountered.",172,null],[11,"entry","","Adds a new entry to the list output.",173,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",173,null],[11,"finish","","Finishes output and returns any error encountered.",173,null],[11,"entry","","Adds a new entry to the map output.",174,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",174,null],[11,"finish","","Finishes output and returns any error encountered.",174,null],[11,"partial_cmp","core::fmt","",175,null],[11,"eq","","",175,null],[11,"cmp","","",175,null],[11,"hash","","",175,null],[11,"default","","",175,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",175,null],[11,"clone","","",175,null],[11,"clone","","",176,null],[11,"fmt","","",176,null],[11,"fmt","","",176,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",177,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",177,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",177,null],[11,"write_fmt","","Writes some formatted information into this instance",177,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",177,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",177,null],[11,"align","","Flag indicating what form of alignment was requested",177,null],[11,"width","","Optionally specified integer width that the output should be",177,null],[11,"precision","","Optionally specified precision for numeric types",177,null],[11,"sign_plus","","Determines if the `+` flag was specified.",177,null],[11,"sign_minus","","Determines if the `-` flag was specified.",177,null],[11,"alternate","","Determines if the `#` flag was specified.",177,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",177,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",177,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",177,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",177,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",177,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",177,null],[11,"write_str","","",177,null],[11,"write_char","","",177,null],[11,"write_fmt","","",177,null],[11,"fmt","","",175,null],[11,"fmt","core::marker","",69,null],[11,"fmt","core::cell","",92,null],[11,"fmt","","",94,null],[11,"fmt","","",95,null],[11,"fmt","","",96,null],[11,"fmt","","",97,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",178,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",178,null],[11,"clone","libc","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",179,null],[11,"clone","","",180,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",181,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",182,null],[11,"clone","","",183,null],[11,"clone","","",184,null],[11,"clone","","",185,null],[11,"clone","","",186,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",187,null],[11,"clone","","",38,null],[11,"clone","","",188,null],[11,"clone","","",39,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",189,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"blksize_t","","",null,null],[6,"nlink_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"sysinfo"],[3,"__exit_status"],[3,"utmpx"],[3,"_libc_fpreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
initSearch(searchIndex);
